{
  "name": "original js-naturalsort tests",
  "batches": [
    {
      "different values types": {
        "number always comes first": {
          "input": [
            "a",
            1
          ],
          "expected": [
            1,
            "a"
          ]
        },
        "number vs numeric string - should remain unchanged (error in chrome)": {
          "input": [
            "1",
            1
          ],
          "expected": [
            "1",
            1
          ]
        },
        "padding numeric string vs number": {
          "input": [
            "02",
            3,
            2,
            "01"
          ],
          "expected": [
            "01",
            "02",
            2,
            3
          ]
        }
      },
      "datetime": {
        "similar dates": {
          "input": [
            "10/12/2008",
            "10/11/2008",
            "10/11/2007",
            "10/12/2007"
          ],
          "expected": [
            "10/11/2007",
            "10/12/2007",
            "10/11/2008",
            "10/12/2008"
          ]
        },
        "test1": {
          "input": [
            "01/01/2008",
            "01/10/2008",
            "01/01/1992",
            "01/01/1991"
          ],
          "expected": [
            "01/01/1991",
            "01/01/1992",
            "01/01/2008",
            "01/10/2008"
          ]
        },
        "javascript toString(), different timezones": {
          "input": [
            "Wed Jan 01 2010 00:00:00 GMT-0800 (Pacific Standard Time)",
            "Thu Dec 31 2009 00:00:00 GMT-0800 (Pacific Standard Time)",
            "Wed Jan 01 2010 00:00:00 GMT-0500 (Eastern Standard Time)"
          ],
          "expected": [
            "Thu Dec 31 2009 00:00:00 GMT-0800 (Pacific Standard Time)",
            "Wed Jan 01 2010 00:00:00 GMT-0500 (Eastern Standard Time)",
            "Wed Jan 01 2010 00:00:00 GMT-0800 (Pacific Standard Time)"
          ]
        },
        "Date.toString(), Date.toLocaleString()": {
          "input": [
            "Saturday, July 3, 2010",
            "Monday, August 2, 2010",
            "Monday, May 3, 2010"
          ],
          "expected": [
            "Monday, May 3, 2010",
            "Saturday, July 3, 2010",
            "Monday, August 2, 2010"
          ]
        },
        "Date.toUTCString()": {
          "input": [
            "Mon, 15 Jun 2009 20:45:30 GMT",
            "Mon, 3 May 2010 17:45:30 GMT",
            "Mon, 15 Jun 2009 17:45:30 GMT"
          ],
          "expected": [
            "Mon, 15 Jun 2009 17:45:30 GMT",
            "Mon, 15 Jun 2009 20:45:30 GMT",
            "Mon, 3 May 2010 17:45:30 GMT"
          ]
        },
        "test2": {
          "input": [
            "Saturday, July 3, 2010 1:45 PM",
            "Saturday, July 3, 2010 1:45 AM",
            "Monday, August 2, 2010 1:45 PM",
            "Monday, May 3, 2010 1:45 PM"
          ],
          "expected": [
            "Monday, May 3, 2010 1:45 PM",
            "Saturday, July 3, 2010 1:45 AM",
            "Saturday, July 3, 2010 1:45 PM",
            "Monday, August 2, 2010 1:45 PM"
          ]
        },
        "test3": {
          "input": [
            "Saturday, July 3, 2010 1:45:30 PM",
            "Saturday, July 3, 2010 1:45:29 PM",
            "Monday, August 2, 2010 1:45:01 PM",
            "Monday, May 3, 2010 1:45:00 PM"
          ],
          "expected": [
            "Monday, May 3, 2010 1:45:00 PM",
            "Saturday, July 3, 2010 1:45:29 PM",
            "Saturday, July 3, 2010 1:45:30 PM",
            "Monday, August 2, 2010 1:45:01 PM"
          ]
        },
        "test4": {
          "input": [
            "2/15/2009 1:45 PM",
            "1/15/2009 1:45 PM",
            "2/15/2009 1:45 AM"
          ],
          "expected": [
            "1/15/2009 1:45 PM",
            "2/15/2009 1:45 AM",
            "2/15/2009 1:45 PM"
          ]
        },
        "ISO8601 Dates": {
          "input": [
            "2010-06-15T13:45:30",
            "2009-06-15T13:45:30",
            "2009-06-15T01:45:30.2",
            "2009-01-15T01:45:30"
          ],
          "expected": [
            "2009-01-15T01:45:30",
            "2009-06-15T01:45:30.2",
            "2009-06-15T13:45:30",
            "2010-06-15T13:45:30"
          ]
        },
        "ISO8601-ish YYYY-MM-DDThh:mm:ss - which does not parse into a Date instance": {
          "input": [
            "2010-06-15 13:45:30",
            "2009-06-15 13:45:30",
            "2009-01-15 01:45:30"
          ],
          "expected": [
            "2009-01-15 01:45:30",
            "2009-06-15 13:45:30",
            "2010-06-15 13:45:30"
          ]
        },
        "RFC1123 testing different timezones": {
          "input": [
            "Mon, 15 Jun 2009 20:45:30 GMT",
            "Mon, 15 Jun 2009 20:45:30 PDT",
            "Mon, 15 Jun 2009 20:45:30 EST"
          ],
          "expected": [
            "Mon, 15 Jun 2009 20:45:30 GMT",
            "Mon, 15 Jun 2009 20:45:30 EST",
            "Mon, 15 Jun 2009 20:45:30 PDT"
          ]
        },
        "unix epoch, Date.getTime()": {
          "input": [
            "1245098730000",
            "14330728000",
            "1245098728000"
          ],
          "expected": [
            "14330728000",
            "1245098728000",
            "1245098730000"
          ]
        }
      },
      "version number strings": {
        "close version numbers": {
          "input": [
            "1.0.2",
            "1.0.1",
            "1.0.0",
            "1.0.9"
          ],
          "expected": [
            "1.0.0",
            "1.0.1",
            "1.0.2",
            "1.0.9"
          ]
        },
        "multi-digit branch release": {
          "input": [
            "1.0.03",
            "1.0.003",
            "1.0.002",
            "1.0.0001"
          ],
          "expected": [
            "1.0.0001",
            "1.0.002",
            "1.0.003",
            "1.0.03"
          ]
        },
        "test5": {
          "input": [
            "1.1beta",
            "1.1.2alpha3",
            "1.0.2alpha3",
            "1.0.2alpha1",
            "1.0.1alpha4",
            "2.1.2",
            "2.1.1"
          ],
          "expected": [
            "1.0.1alpha4",
            "1.0.2alpha1",
            "1.0.2alpha3",
            "1.1.2alpha3",
            "1.1beta",
            "2.1.1",
            "2.1.2"
          ]
        },
        "string first": {
          "input": [
            "myrelease-1.1.3",
            "myrelease-1.2.3",
            "myrelease-1.1.4",
            "myrelease-1.1.1",
            "myrelease-1.0.5"
          ],
          "expected": [
            "myrelease-1.0.5",
            "myrelease-1.1.1",
            "myrelease-1.1.3",
            "myrelease-1.1.4",
            "myrelease-1.2.3"
          ]
        }
      },
      "numerics": {
        "string vs number": {
          "input": [
            "10",
            9,
            2,
            "1",
            "4"
          ],
          "expected": [
            "1",
            2,
            "4",
            9,
            "10"
          ]
        },
        "0 left-padded numbers": {
          "input": [
            "0001",
            "002",
            "001"
          ],
          "expected": [
            "0001",
            "001",
            "002"
          ]
        },
        "0 left-padded numbers and regular numbers": {
          "input": [
            2,
            1,
            "1",
            "0001",
            "002",
            "02",
            "001"
          ],
          "expected": [
            "0001",
            "001",
            "002",
            "02",
            1,
            "1",
            2
          ]
        },
        "decimal string vs decimal, different precision": {
          "input": [
            "10.0401",
            10.022,
            10.042,
            "10.021999"
          ],
          "expected": [
            "10.021999",
            10.022,
            "10.0401",
            10.042
          ]
        },
        "decimal string vs decimal, same precision": {
          "input": [
            "10.04",
            10.02,
            10.03,
            "10.01"
          ],
          "expected": [
            "10.01",
            10.02,
            10.03,
            "10.04"
          ]
        },
        "float/decimal with 'F' or 'D' notation": {
          "input": [
            "10.04f",
            "10.039F",
            "10.038d",
            "10.037D"
          ],
          "expected": [
            "10.037D",
            "10.038d",
            "10.039F",
            "10.04f"
          ]
        },
        "not foat/decimal notation": {
          "input": [
            "10.004Z",
            "10.039T",
            "10.038ooo",
            "10.037g"
          ],
          "expected": [
            "10.004Z",
            "10.037g",
            "10.038ooo",
            "10.039T"
          ]
        },
        "scientific notation": {
          "input": [
            "1.528535047e5",
            "1.528535047e7",
            "1.528535047e3"
          ],
          "expected": [
            "1.528535047e3",
            "1.528535047e5",
            "1.528535047e7"
          ]
        },
        "negative numbers as strings": {
          "input": [
            "-1",
            "-2",
            "4",
            "-3",
            "0",
            "-5"
          ],
          "expected": [
            "-5",
            "-3",
            "-2",
            "-1",
            "0",
            "4"
          ]
        },
        "negative numbers as strings - mixed input type, string + numeric": {
          "input": [
            -1,
            "-2",
            4,
            -3,
            "0",
            "-5"
          ],
          "expected": [
            "-5",
            -3,
            "-2",
            -1,
            "0",
            4
          ]
        },
        "negative floats - all numeric": {
          "input": [
            -2.01,
            -2.1,
            4.144,
            4.1,
            -2.001,
            -5
          ],
          "expected": [
            -5,
            -2.1,
            -2.01,
            -2.001,
            4.1,
            4.144
          ]
        }
      },
      "IP addresses": {
        "test6": {
          "input": [
            "192.168.0.100",
            "192.168.0.1",
            "192.168.1.1",
            "192.168.0.250",
            "192.168.1.123",
            "10.0.0.2",
            "10.0.0.1"
          ],
          "expected": [
            "10.0.0.1",
            "10.0.0.2",
            "192.168.0.1",
            "192.168.0.100",
            "192.168.0.250",
            "192.168.1.1",
            "192.168.1.123"
          ]
        }
      },
      "filenames": {
        "simple image filenames": {
          "input": [
            "img12.png",
            "img10.png",
            "img2.png",
            "img1.png"
          ],
          "expected": [
            "img1.png",
            "img2.png",
            "img10.png",
            "img12.png"
          ]
        },
        "complex filenames": {
          "input": [
            "car.mov",
            "01alpha.sgi",
            "001alpha.sgi",
            "my.string_41299.tif",
            "organic2.0001.sgi"
          ],
          "expected": [
            "001alpha.sgi",
            "01alpha.sgi",
            "car.mov",
            "my.string_41299.tif",
            "organic2.0001.sgi"
          ]
        },
        "unix filenames": {
          "input": [
            "./system/kernel/js/01_ui.core.js",
            "./system/kernel/js/00_jquery-1.3.2.js",
            "./system/kernel/js/02_my.desktop.js"
          ],
          "expected": [
            "./system/kernel/js/00_jquery-1.3.2.js",
            "./system/kernel/js/01_ui.core.js",
            "./system/kernel/js/02_my.desktop.js"
          ]
        }
      },
      "space(s) as first character(s)": {
        "test7": {
          "input": [
            "alpha",
            " 1",
            "  3",
            " 2",
            0
          ],
          "expected": [
            0,
            " 1",
            " 2",
            "  3",
            "alpha"
          ]
        }
      },
      "empty strings and space character": {
        "test8": {
          "input": [
            "10023",
            "999",
            "",
            2,
            5.663,
            5.6629
          ],
          "expected": [
            "",
            2,
            5.6629,
            5.663,
            "999",
            "10023"
          ]
        },
        "test9": {
          "input": [
            0,
            "0",
            ""
          ],
          "expected": [
            0,
            "0",
            ""
          ]
        }
      },
      "hex": {
        "real hex numbers": {
          "input": [
            "0xA",
            "0x9",
            "0x99"
          ],
          "expected": [
            "0x9",
            "0xA",
            "0x99"
          ]
        },
        "fake hex numbers": {
          "input": [
            "0xZZ",
            "0xVVV",
            "0xVEV",
            "0xUU"
          ],
          "expected": [
            "0xUU",
            "0xVEV",
            "0xVVV",
            "0xZZ"
          ]
        }
      },
      "unicode": {
        "basic latin": {
          "input": [
            "D",
            "U",
            "T",
            "C"
          ],
          "expected": [
            "C",
            "D",
            "T",
            "U"
          ]
        }
      },
      "contributed tests": {
        "contributed by Bob Zeiner": {
          "input": [
            "T78",
            "U17",
            "U10",
            "U12",
            "U14",
            "745",
            "U7",
            "01",
            "485",
            "S16",
            "S2",
            "S22",
            "1081",
            "S25",
            "1055",
            "779",
            "776",
            "771",
            "44",
            "4",
            "87",
            "1091",
            "42",
            "480",
            "952",
            "951",
            "756",
            "1000",
            "824",
            "770",
            "666",
            "633",
            "619",
            "1",
            "991",
            "77H",
            "PIER-7",
            "47",
            "29",
            "9",
            "77L",
            "433"
          ],
          "expected": [
            "01",
            "1",
            "4",
            "9",
            "29",
            "42",
            "44",
            "47",
            "77H",
            "77L",
            "87",
            "433",
            "480",
            "485",
            "619",
            "633",
            "666",
            "745",
            "756",
            "770",
            "771",
            "776",
            "779",
            "824",
            "951",
            "952",
            "991",
            "1000",
            "1055",
            "1081",
            "1091",
            "PIER-7",
            "S2",
            "S16",
            "S22",
            "S25",
            "T78",
            "U7",
            "U10",
            "U12",
            "U14",
            "U17"
          ]
        },
        "contributed by Scott": {
          "input": [
            "FSI stop, Position: 5",
            "Mail Group stop, Position: 5",
            "Mail Group stop, Position: 5",
            "FSI stop, Position: 6",
            "FSI stop, Position: 6",
            "Newsstand stop, Position: 4",
            "Newsstand stop, Position: 4",
            "FSI stop, Position: 5"
          ],
          "expected": [
            "FSI stop, Position: 5",
            "FSI stop, Position: 5",
            "FSI stop, Position: 6",
            "FSI stop, Position: 6",
            "Mail Group stop, Position: 5",
            "Mail Group stop, Position: 5",
            "Newsstand stop, Position: 4",
            "Newsstand stop, Position: 4"
          ]
        }
      }
    }
  ]
}
